oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- vector("list",7)
names(strings_dists) <- names(strings)
for (i in 1:length(strings)){
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- vector("list",7)
names(strings_dists) <- names(strings)
strings_dists
# random distance matrix
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
distances[1:5, 1:5]
#' @title get_dist
#' @description calculate the total distance between two palces
#' @param distance=the matrix of distance among letters.
#' @param ltrs = a character vector of upper case letters.
#' @return result
get_dist <- function(distance,ltrs){
if (!all(ltrs%in% LETTERS)){
stop("Unrecognized character")}
sum=0
for (i in 1:(length(ltrs)-1)){
sum=sum+distance[ltrs[i],ltrs[i+1]]
}
return(sum)
}
# test
cal <- c('C', 'A', 'L')
get_dist(distances,cal)
stats <- c('S', 'T', 'A', 'T', 'S')
get_dist(distances,stats)
oski <- c('O', 'S', 'K', 'I')
get_dist(distances,oski)
zzz <- rep('Z', 3)
get_dist(distances,zzz)
lets <- LETTERS
get_dist(distances,lets)
first <- c('L','U')
get_dist(distances,first)
last <-  c('Z', 'H', 'A', 'N', 'G')
get_dist(distances,last)
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- vector("list",7)
names(strings_dists) <- names(strings)
for (i in 1:length(strings)){
strings_dists[i] <- get_dist(distances,stings[i])
}
knitr::opts_chunk$set(echo=TRUE,error=TRUE)
# random distance matrix
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
distances[1:5, 1:5]
#' @title get_dist
#' @description calculate the total distance between two palces
#' @param distance=the matrix of distance among letters.
#' @param ltrs = a character vector of upper case letters.
#' @return result
get_dist <- function(distance,ltrs){
if (!all(ltrs%in% LETTERS)){
stop("Unrecognized character")}
sum=0
for (i in 1:(length(ltrs)-1)){
sum=sum+distance[ltrs[i],ltrs[i+1]]
}
return(sum)
}
# test
cal <- c('C', 'A', 'L')
get_dist(distances,cal)
stats <- c('S', 'T', 'A', 'T', 'S')
get_dist(distances,stats)
oski <- c('O', 'S', 'K', 'I')
get_dist(distances,oski)
zzz <- rep('Z', 3)
get_dist(distances,zzz)
lets <- LETTERS
get_dist(distances,lets)
first <- c('L','U')
get_dist(distances,first)
last <-  c('Z', 'H', 'A', 'N', 'G')
get_dist(distances,last)
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- vector("list",7)
names(strings_dists) <- names(strings)
for (i in 1:length(strings)){
strings_dists[i] <- get_dist(distances,stings[i])
}
# random distance matrix
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
distances[1:5, 1:5]
#' @title get_dist
#' @description calculate the total distance between two palces
#' @param distance=the matrix of distance among letters.
#' @param ltrs = a character vector of upper case letters.
#' @return result
get_dist <- function(distance,ltrs){
if (!all(ltrs%in% LETTERS)){
stop("Unrecognized character")}
sum=0
for (i in 1:(length(ltrs)-1)){
sum=sum+distance[ltrs[i],ltrs[i+1]]
}
return(sum)
}
# test
cal <- c('C', 'A', 'L')
get_dist(distances,cal)
stats <- c('S', 'T', 'A', 'T', 'S')
get_dist(distances,stats)
oski <- c('O', 'S', 'K', 'I')
get_dist(distances,oski)
zzz <- rep('Z', 3)
get_dist(distances,zzz)
lets <- LETTERS
get_dist(distances,lets)
first <- c('L','U')
get_dist(distances,first)
last <-  c('Z', 'H', 'A', 'N', 'G')
get_dist(distances,last)
return(x)
cong(n=3)
cong <- function(n=1,seed=17,a=3,b=64,){
x <- rep(0,n)
x[1] <- (seed*a)%%b
if (n==1){
return(x)
}else{
for (i in 2:n){
x[i] <- (x[i-1]*a)%%b
}
return(x)
}
}
# congruential generator
cong <- function(n=1,seed=17,a=3,b=64,){
x <- rep(0,n)
x[1] <- (seed*a)%%b
if (n==1){
return(x)
}else{
for (i in 2:n){
x[i] <- (x[i-1]*a)%%b
}
return(x)
}
}
x[i] <- (x[i-1])*a%%b
# congruential generator
cong <- function(n=1,seed=17,a=3,b=64,){
x <- rep(0,n)
x[1] <- (seed*a)%%b
if (n==1){
return(x)
}else{
for (i in 2:n){
x[i] <- (x[i-1]*a)%%b
}
return(x)
}
}
cong(n=3)
# congruential generator
cong <- function(n=1,seed=17,a=3,b=64){
x <- rep(0,n)
x[1] <- (seed*a)%%b
if (n==1){
return(x)
}else{
for (i in 2:n){
x[i] <- (x[i-1]*a)%%b
}
return(x)
}
}
cong(n=3)
set.seed(12345)
rnorm(n=5,mean=0,sd=1)
set.seed(12345)
rnorm(n=5,mean=0,sd=1)
coin <- c("H","T")
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2)
sample(coin,size=2,replace=TURE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE)
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
coin=c("H","T")
tosses <- sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
coin=c("H","T")
tosses <- sample(coin,size=2,replace=TRUE,prob=c(0.9,0.1))
tosses
coin=c("H","T")
tosses <- sample(coin,size=100,replace=TRUE,prob=c(0.9,0.1))
tosses
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(rep(0,4000),nrow=1000,ncol=5)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count=rep(0,1000)
for (i in 1:1000){
count[i]=sum(drawn_balls[i,]=="blue")
}
propor=table(count)/1000
propor
```
```{r}
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(rep(0,4000),nrow=1000,ncol=4)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count=rep(0,1000)
for (i in 1:1000){
count[i]=sum(drawn_balls[i,]=="blue")
}
propor=table(count)/1000
propor
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(rep(0,12),nrow=3,ncol=4)
for (i in 1:3){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count=rep(0,3)
for (i in 1:3){
count[i]=sum(drawn_balls[i,]=="blue")
}
propor=table(count)/3
propor
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
repetitions=1000
propor=matrix(rep(0,repetitions*5),nrow=repetitions,ncol=5)
for (j in 1:repetitions){
drawn_balls=matrix(rep(0,4*j),nrow=j,ncol=4)
for (i in 1:j){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count=rep(0,j)
for (i in 1:j){
count[i]=sum(drawn_balls[i,]=="blue")
}
propor[j,]=table(count)/j
}
propor
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(rep(0,4000),nrow=1000,ncol=4)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count=rep(0,1000)
for (i in 1:1000){
count[i]=sum(drawn_balls[i,]=="blue")
}
propor=table(count)/1000
propor
library(ggplot2)
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(0,nrow=1000,ncol=4)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count0=0
count1=0
count2=0
count3=0
count4=0
propor=matrix(0,nrow=1000,ncol=5)
for (i in 1:1000){
count=sum(drawn_balls[i,]=="blue")
if (count==0){count0=count0+1
}else if (count==1){count1=count1+1
}else if(count==2){count2=count2+1
}else if(count==3){count3=count3+1
}else if(count==4){count4=count4+1}
propor[i,]=c(count0,count1,count2,count3,count4)/i
}
data = data.frame(
"0"=propor[,1],
"1"=propor[,2],
"2"=propor[,3],
"3"=propor[,4],
"4"=propor[,5]
)
View(data)
View(strings_dists)
View(dat)
View(dat)
library(ggplot2)
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(0,nrow=1000,ncol=4)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count0=0
count1=0
count2=0
count3=0
count4=0
propor=matrix(0,nrow=1000,ncol=5)
for (i in 1:1000){
count=sum(drawn_balls[i,]=="blue")
if (count==0){count0=count0+1
}else if (count==1){count1=count1+1
}else if(count==2){count2=count2+1
}else if(count==3){count3=count3+1
}else if(count==4){count4=count4+1}
propor[i,]=c(count0,count1,count2,count3,count4)/i
}
data = data.frame(
reps=1:1000,
number0=propor[,1],
number1=propor[,2],
number2=propor[,3],
number3=propor[,4],
number4=propor[,5]
)
View(data)
View(data)
View(data)
View(data)
View(data)
library(ggplot2)
box1 = c("blue","blue","red")
box2 = c("blue","blue","red","red","red","white")
drawn_balls=matrix(0,nrow=1000,ncol=4)
for (i in 1:1000){
toss = runif(1)
if (toss>0.5){
drawn_balls[i,]=sample(box1,size=4,replace=TRUE)
}else{
drawn_balls[i,]=sample(box2,size=4,replace=FALSE)
}
}
count0=0
count1=0
count2=0
count3=0
count4=0
propor=matrix(0,nrow=1000,ncol=5)
for (i in 1:1000){
count=sum(drawn_balls[i,]=="blue")
if (count==0){count0=count0+1
}else if (count==1){count1=count1+1
}else if(count==2){count2=count2+1
}else if(count==3){count3=count3+1
}else if(count==4){count4=count4+1}
propor[i,]=c(count0,count1,count2,count3,count4)/i
}
data = data.frame(
reps=1:1000,
number0=propor[,1],
number1=propor[,2],
number2=propor[,3],
number3=propor[,4],
number4=propor[,5]
)
data
library(shiny); runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app_dan_zhao.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-Lu-Zhang.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2', token='095A6594CE0CE4B7B3B3060003E26740', secret='6yZ3EJmTNyy8Blo/2+bCkXTJ8NRNnQZhm0HIN6Zq')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='<SECRET>')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='<SECRET>')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='<SECRET>')
rsconnect::setAccountInfo(name='luzhangenvstat133workout2',
token='095A6594CE0CE4B7B3B3060003E26740',
secret='6yZ3EJmTNyy8Blo/2+bCkXTJ8NRNnQZhm0HIN6Zq')
library(shiny); runApp('C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations/app-workout2-Lu-Zhang.R')
deployApp()
getwd
getwd()
? deployApp
setwd(C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations)
setwd(C:\Users\zljsz\Desktop\course\STAT133\workout2\Saving_Simulations)
setwd("C:/Users/zljsz/Desktop/course/STAT133/workout2/Saving_Simulations")
getwd()
deployApp(appDir=getwd())
deployApp(appDir=getwd())
rsconnect::deployApp(appDir=getwd())
rsconnect::deployApp(appDir=getwd())
runApp('workout2LuZhang.R')
